trigger: none

pr:
  branches:
    include:
      - main

pool:
  name: Self-Hosted   # Your agent pool name

stages:
  - stage: CaptureRollbackScripts
    displayName: 'Capture Rollback Scripts and Insert into Mapper Table'
    jobs:
      - job: DB_Migrator
        steps:
          - checkout: self
            persistCredentials: true
          - task: PowerShell@2
            displayName: 'File Capture and Insertor'
            inputs:
              targetType: 'inline'
              script: |
                  $prId = "$(System.PullRequest.PullRequestId)"
                  Write-Host "PR ID detected: $prId"
                  $sourceBranch = "$(System.PullRequest.SourceBranch)" -replace 'refs/heads/', ''
                  Write-Host "Source branch: $sourceBranch"
                  git fetch origin
                  $changedFiles = git diff --diff-filter=AM --name-only origin/main origin/$sourceBranch
                  $rollbackScripts = $changedFiles | Where-Object { $_ -like "*Database/MSSQL_Server/Dev/rollback_sql/*.sql" }
                  if (-not $rollbackScripts -or $rollbackScripts.Count -eq 0) {
                              Write-Host "No changed rollback scripts detected. Exiting."
                      exit 0
                  }
                  $connectionString = "Server=localhost;Database=Payroll;User Id=$(dbUser);Password=$(dbPassword);"
                  $connection = New-Object System.Data.SqlClient.SqlConnection
                  $connection.ConnectionString = $connectionString
                  $connection.Open()
                  foreach ($scriptPath in $rollbackScripts) {
                      $scriptName = [System.IO.Path]::GetFileName($scriptPath)
                      $query = "INSERT INTO Payroll.dbo.migration_rollback_mapper (rollback_script_name, rollback_script_repo_folder, rollback_script_repo_url, build_id, pr_id) VALUES ('$scriptName', 'Database/MSSQL_Server/Dev/rollback_sql', 'https://github.com/ktsreddy007/DB_Migrotron', '$(Build.BuildId)', '$prId')"
                      $command = $connection.CreateCommand()
                      $command.CommandText = $query
                      $command.ExecuteNonQuery()
                      Write-Host "‚úÖ Inserted into DB: $scriptName"
                  }
                  $connection.Close()
            env:
              dbUser: $(dbUser)
              dbPassword: $(dbPassword)
          - task: PowerShell@2
            displayName: 'Check and Install Java (via command only)'
            inputs:
              targetType: 'inline'
              script: |
                if (Get-Command java -ErrorAction SilentlyContinue) {
                  Write-Host "Java is already installed."
                } else {
                  Write-Host "Java is NOT installed. Installing OpenJDK 11..."
                  choco install -y openjdk11
                }
          - task: PowerShell@2
            displayName: 'Check and Install Flyway CLI (any version)'
            inputs:
              targetType: 'inline'
              script: |
                if (Get-Command flyway -ErrorAction SilentlyContinue) {
                  Write-Host "Flyway CLI is already installed."
                } else {
                    Write-Host "Flyway CLI is NOT installed. Installing..."
                    $flywayZip = "$(Build.SourcesDirectory)\flyway.zip"
                    Invoke-WebRequest -Uri "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.8.1/flyway-commandline-9.8.1-windows-x64.zip" -OutFile $flywayZip
                    Expand-Archive -Path $flywayZip -DestinationPath "$(Build.SourcesDirectory)\flyway"
                    $flywayPath = "$(Build.SourcesDirectory)\flyway\flyway-9.8.1"
                    $env:Path = "$flywayPath;$env:Path"
                    Write-Host "Flyway CLI installed successfully."
                  }
          - task: PowerShell@2
            displayName: 'Conditional Flyway Validate (skip on fresh DB)'
            inputs:
              targetType: 'inline'
              script: |
                $connectionString = "Server=localhost;Database=Payroll;User Id=Ktsreddy007;Password=Gold007@;"
                $connection = New-Object System.Data.SqlClient.SqlConnection
                $connection.ConnectionString = $connectionString
                $connection.Open()
                $query = "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'flyway_schema_history'"
                $command = $connection.CreateCommand()
                $command.CommandText = $query
                $tableExists = $command.ExecuteScalar()
                $connection.Close()
                $flywayConfigPath = "$(Build.SourcesDirectory)\Database\MSSQL_Server\Dev\conf\flyway-dev.conf"
                Write-Host "Using Flyway config file at path: $flywayConfigPath"
                if ($tableExists -gt 0) {
                        Write-Host "flyway_schema_history table found. Proceeding with flyway validate."
                        $validateArgs = "validate -configFiles=""$flywayConfigPath"""
                        $validateProcess = Start-Process -FilePath flyway -ArgumentList $validateArgs -NoNewWindow -PassThru -Wait
                        if ($validateProcess.ExitCode -ne 0) {
                              Write-Error "Flyway validate failed."
                              exit 1
                        }
                }
                else {
                    Write-Host "flyway_schema_history table NOT found. Skiping flyway validate for fresh DB."
                }
          - task: PowerShell@2
            displayName: 'Flyway Info (Dry Run)'
            inputs:
              targetType: 'inline'
              script: |
                $flywayConfigPath = "$(Build.SourcesDirectory)\Database\MSSQL_Server\Dev\conf\flyway-dev.conf"
                Write-Host "Using Flyway config file at path: $flywayConfigPath"
                $infoArgs = "info -configFiles=`"$flywayConfigPath`""
                $infoProcess = Start-Process -FilePath flyway -ArgumentList $infoArgs -NoNewWindow -PassThru -Wait
                if ($infoProcess.ExitCode -ne 0) {
                    Write-Error "Flyway info command failed."
                    exit 1
                }
          - task: PowerShell@2
            displayName: 'Check if Rollback Script Exists for this PR'
            inputs:
                targetType: 'inline'
                script: |
                    $prId = "$(System.PullRequest.PullRequestId)"
                    Write-Host "Checking rollback scripts for PR ID: $prId"
                    $connectionString = "Server=localhost;Database=Payroll;User Id=$(dbUser);Password=$(dbPassword);"
                    $connection = New-Object System.Data.SqlClient.SqlConnection
                    $connection.ConnectionString = $connectionString
                    $connection.Open()
                    $query = "SELECT COUNT(*) FROM Payroll.dbo.migration_rollback_mapper WHERE pr_id = '$prId' AND rollback_script_name IS NOT NULL AND LTRIM(RTRIM(rollback_script_name)) <> ''"
                    $command = $connection.CreateCommand()
                    $command.CommandText = $query
                    $rollbackCount = $command.ExecuteScalar()
                    $connection.Close()
                    if ($rollbackCount -eq 0) {
                          Write-Host "No valid rollback scripts found for PR $prId. Failing pipeline."
                          exit 1
                        } else {
                        Write-Host "Valid Rollback script(s) found: $rollbackCount for PR $prId. Proceeding..."
                        ##vso[task.setvariable variable=HasRollbackEntry;isOutput=true]true
                    }
            env:
              dbUser: $(dbUser)
              dbPassword: $(dbPassword)                        
  - stage: CleanupRollbackEntryIfPRClosed
    displayName: 'Delete Rollback Script Entry if PR is Closed without Merge'
    dependsOn: CaptureRollbackScripts
    condition: |
      and(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['System.PullRequest.IsFork'], false),
        in(variables['System.PullRequest.PullRequestStatus'], 'abandoned', 'rejected')
        eq(dependencies.CaptureRollbackScripts.outputs['DB_Migrator.CheckRollbackScripts.HasRollbackEntry'], 'true')
      )
    jobs:
      - job: DeleteRollbackEntry
        displayName: 'Delete Rollback Mapper Entry'
        pool:
          name: Self-Hosted
        steps:
          - task: PowerShell@2
            displayName: 'Delete rollback entries for closed PR'
            inputs:
              targetType: 'inline'
              script: |
                $prId = "$(System.PullRequest.PullRequestId)"
                $prStatus = "$(System.PullRequest.PullRequestStatus)"
                $buildReason = "$(Build.Reason)"
                Write-Host "üîç Evaluating cleanup conditions for PR: $prId"
                Write-Host "   - Build Reason: $buildReason"
                Write-Host "   - PR Status: $prStatus"
                if ($buildReason -ne "PullRequest" -or ($prStatus -ne "abandoned" -and $prStatus -ne "rejected")) {
                      Write-Host "Conditions not met for cleanup. Skipping rollback entry deletion."
                    exit 0
                }
                Write-Host "üßπ Cleaning up rollback entry for abandoned PR: $prId"
                $connectionString = "Server=localhost;Database=Payroll;User Id=$(dbUser);Password=$(dbPassword);"
                $connection = New-Object System.Data.SqlClient.SqlConnection
                $connection.ConnectionString = $connectionString
                $connection.Open()
                $checkQuery = "SELECT COUNT(*) FROM Payroll.dbo.migration_rollback_mapper WHERE pr_id = '$prId'"
                $checkCommand = $connection.CreateCommand()
                $checkCommand.CommandText = $checkQuery
                $entryCount = $checkCommand.ExecuteScalar()
                if ($entryCount -eq 0) {
                      Write-Host "No rollback entries found for PR $prId. Nothing to delete."
                      $connection.Close()
                      exit 0
                }
                $query = "DELETE FROM Payroll.dbo.migration_rollback_mapper WHERE pr_id = '$prId'"
                $command = $connection.CreateCommand()
                $command.CommandText = $query
                $deleted = $command.ExecuteNonQuery()
                $connection.Close()
                Write-Host "‚úÖ Deleted $deleted rollback record(s) for PR ID $prId."
            env:
              dbUser: $(dbUser)
              dbPassword: $(dbPassword)                