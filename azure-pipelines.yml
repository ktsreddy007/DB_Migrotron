trigger: none

pr:
  branches:
    include:
      - main

pool:
  name: Self-Hosted   # Your aget pool name

stages:
  - stage: CaptureRollbackScripts
    displayName: 'Capture Rollback Scripts and Insert into Mapper Table'
    jobs:
      - job: InsertRollbackScripts
        steps:
          - checkout: self
            persistCredentials: true
          - task: PowerShell@2
            displayName: 'Insert rollback script names into DB'
            inputs:
              targetType: 'inline'
              script: |
                  $prId = "$(System.PullRequest.PullRequestId)"
                  Write-Host "PR ID detected: $prId"
                  $sourceBranch = "$(System.PullRequest.SourceBranch)" -replace 'refs/heads/', ''
                  Write-Host "Source branch: $sourceBranch"
                  git fetch origin
                  $changedFiles = git diff --name-only origin/main origin/$sourceBranch
                  $rollbackScripts = $changedFiles | Where-Object { $_ -like "*Database/MSSQL_Server/Dev/rollback_sql/*.sql" }
                  if (-not $rollbackScripts -or $rollbackScripts.Count -eq 0) {
                              Write-Host "No changed rollback scripts detected. Exiting."
                      exit 0
                  }
                  $connectionString = "Server=localhost;Database=Payroll;User Id=$(dbUser);Password=$(dbPassword);"
                  $connection = New-Object System.Data.SqlClient.SqlConnection
                  $connection.ConnectionString = $connectionString
                  $connection.Open()
                  foreach ($scriptPath in $rollbackScripts) {
                      $scriptName = [System.IO.Path]::GetFileName($scriptPath)
                      $query = "INSERT INTO migration_rollback_mapper (rollback_script_name, rollback_script_repo_folder, rollback_script_repo_url, build_id, pr_id) VALUES ('$scriptName', 'Database/MSSQL_Server/Dev/rollback_sql', 'https://github.com/ktsreddy007/DB_Migrotron', '$(Build.BuildId)', '$prId')"
                      $command = $connection.CreateCommand()
                      $command.CommandText = $query
                      $command.ExecuteNonQuery()
                      Write-Host "âœ… Inserted into DB: $scriptName"
                  }
                  $connection.Close()
            env:
              dbUser: $(dbUser)
              dbPassword: $(dbPassword)